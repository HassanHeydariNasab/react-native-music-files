{"version":3,"sources":["index.tsx"],"names":["NativeModules","Platform","MusicFiles","getTracks","options","Promise","res","rej","OS","getAll"],"mappings":"AAAA,SAASA,aAAT,EAAwBC,QAAxB,QAAwC,cAAxC;AAEA,MAAM;AAAEC,EAAAA;AAAF,IAAiBF,aAAvB;AAkBA,OAAO,MAAMG,SAAS,GAAIC,OAAD,IAA+B;AACpD,SAAO,IAAIC,OAAJ,CAAyB,CAACC,GAAD,EAAMC,GAAN,KAAY;AACxC,QAAGN,QAAQ,CAACO,EAAT,KAAgB,SAAnB,EAA6B;AACzBN,MAAAA,UAAU,CAACO,MAAX,CAAkBL,OAAlB,EAA2BE,GAA3B,EAAgCC,GAAhC;AACH,KAFD,MAEK;AACDA,MAAAA,GAAG,CAAC,wBAAD,CAAH;AACH;AACJ,GANM,CAAP;AAOH,CARM,C,CAUP;AACA;AACA;AACA;;AAEAL,UAAU,CAACC,SAAX,GAAuBA,SAAvB;AAEA,eAAeD,UAAf","sourcesContent":["import { NativeModules, Platform } from 'react-native';\n\nconst { MusicFiles } = NativeModules;\n\nexport interface MusicFileOptions {\n    minimumSongDuration: number;\n}\n\nexport interface MusicFile {\n    id: string;\n    path: string;\n    artist: string;\n    title: string;\n    displayName: string;\n    album: string;\n    duration: number;\n    cover: string;\n}\n\n\nexport const getTracks = (options: MusicFileOptions) => {\n    return new Promise<MusicFile[]>((res, rej)=>{\n        if(Platform.OS === 'android'){\n            MusicFiles.getAll(options, res, rej);\n        }else{\n            rej('not support on ios yet');\n        }\n    })\n}\n\n// export const syncTracks = (options: MusicFileOptions, onTrackReceived: (track: MusicFile)=> void) =>{\n//     DeviceEventEmitter.addListener(\"onSongReceived\", onTrackReceived);\n//     return getTracks(options);\n// }\n\nMusicFiles.getTracks = getTracks;\n\nexport default MusicFiles;\n"]}